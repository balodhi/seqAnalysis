#! /usr/bin/env python 

##################################
# Parse CompletedJobInfo.xml and GenerateFASTQRunStatistics.xml within Illumina run folder
# Export
#   - library ID <SampleID>
#   - run ID <Run>
#   - instrument <Instrument>
#   - cycle number <NumCycles>
#   - type of sequencing PE/SE (Calculate from number of children of <Read>)
#   - Total number of clusters <NumberOfClustersRaw>
#   - Passed number of clusters <NumberOfClustersPF>
########################################################


import sys
import xml.etree.ElementTree as ET
import MySQLdb as mdb
import pdb
import datetime

def main(argv):

    run_info = "/".join([argv[1], "CompletedJobInfo.xml"])
    fastq_info = "/".join([argv[1], "GenerateFASTQRunStatistics.xml"])
    run_file = ET.parse(run_info)
    fastq_file = ET.parse(fastq_info)
    pdb.set_trace()
    # Process general run data
    root = run_file.getroot()
    run_node = root.find("RTARunInfo").find("Run")
    
    run_dict = dict()    
    run_dict['run_id'] = run_node.attrib['Id']
    run_dict['instrument'] = run_node.find("Instrument").text
    run_dict['date'] = "20" + run_node.find("Date").text + "000000"

    ## Connect to db
    try:
        conn = mdb.connect('localhost', 'brad', 'Eu23ler1', 'sample_db')
        cur = conn.cursor()
    except mdb.Error, e:
        print "MySQLdb error %d: %s " % (e.args[0] + e.args[1])
    
    ## Parse XML
  ###  pdb.set_trace()
    

#    run_date = datetime.datetime.strptime(run_date, "%Y-%m-%d")
#    run_date = run_date.strftime('%Y-%m-%d')
    info = dict()
    for sample in root.iter("SummarizedSampleStatistics"):
        # Populate dict
        info['sample_id'] = sample.find("SampleID").text
        info['sample_name'] = sample.find("SampleName").text
        info['clusters_pf'] = sample.find("NumberOfClustersPF").text
        info['clusters_raw'] = sample.find("NumberOfClustersRaw").text
        
        # Process dict
        info['sample_id'] = int(filter(lambda x: x.isdigit(), info['sample_id']))

        pdb.set_trace()
        #Write to db            
        #Check if record exists using date and idlibrary
        exec_string = "SELECT EXISTS(SELECT 1 FROM sequencing WHERE date = {0} AND idlibrary = {1})".format(run_date, info['sample_id'])
        cur.execute(exec_string)
        print cur.fetchall()[0]
        exec_string = "INSERT INTO sequencing (date, idlibrary, clusters_raw, clusters_pf) VALUES ({0}, {1}, {2}, {3})".format(run_date, info['sample_id'], info['clusters_raw'], info['clusters_pf'])
        cur.execute(exec_string)
        
        cur.execute("SELECT * FROM sequencing WHERE idlibrary = {0}".format(info['sample_id']))
        print cur.fetchall()[0]

        conn.commit()
    #Close connection
    
if __name__ == "__main__":
    main(sys.argv)
